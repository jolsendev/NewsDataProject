1. What are the most popular three articles of all time? Which articles have been accessed the most? Present this
information as a sorted list with the most popular article at the top.

    SELECT articles.title, count(*) AS num from log, articles
    WHERE log.path <> '/'
    AND SUBSTR(log.path, 10) like '%' || articles.slug || '%'
    GROUP BY articles.title
    ORDER BY num DESC
    LIMIT 3 OFFSET 0;

Example:

"Princess Shellfish Marries Prince Handsome" — 1201 views
"Baltimore Ravens Defeat Rhode Island Shoggoths" — 915 views
"Political Scandal Ends In Political Scandal" — 553 views

-----------------------------------------------------------------

2. Who are the most popular article authors of all time? That is, when you sum up all of the articles each author has
written, which authors get the most page views? Present this as a sorted list with the most popular author at the top.

 select authors.name , result.num from  authors , (
    SELECT articles.author, count(*) AS num from log, articles
    WHERE log.path <> '/'
    AND SUBSTR(log.path, 10) like '%' || articles.slug || '%'
    GROUP BY articles.author
    ORDER BY num DESC
    LIMIT 3 OFFSET 0) as result
where authors.id = result.author;


Example:

Ursula La Multa — 2304 views
Rudolf von Treppenwitz — 1985 views
Markoff Chaney — 1723 views
Anonymous Contributor — 1023 views

------------------------------------------------------------------

3. On which days did more than 1% of requests lead to errors? The log table includes a column status that indicates the
HTTP status code that the news site sent to the user's browser. (Refer back to this lesson if you want to review the
idea of HTTP status codes.)




SELECT final_result.total_requests, final_result.percentage
FROM (
    SELECT result.t_total_requests_per_day as total_requests, ( CAST (result_two.num AS FLOAT) / CAST(result.num AS FLOAT) ) * 100 as percentage
    FROM (
        SELECT TO_CHAR(time, 'Mon-dd-YYYY') as t_total_requests_per_day, count(*) as num
        FROM log
        GROUP BY t_total_requests_per_day
    ) as result,
        (
        SELECT TO_CHAR(time, 'Mon-dd-YYYY') as t_total_bad_requests_per_day, count(*) as num
        FROM log
        WHERE status != '200 OK'
        GROUP BY t_total_bad_requests_per_day
    ) as result_two
    WHERE result.t_total_requests_per_day = result_two.t_total_bad_requests_per_day) as final_result
WHERE final_result.percentage > 1.0;


July 29, 2016 — 2.5% errors

########################################################################################################################

                                  Table "public.articles"
 Column |           Type           |                       Modifiers
--------+--------------------------+-------------------------------------------------------
 author | integer                  | not null
 title  | text                     | not null
 slug   | text                     | not null
 lead   | text                     |
 body   | text                     |
 time   | timestamp with time zone | default now()
 id     | integer                  | not null default nextval('articles_id_seq'::regclass)
Indexes:
    "articles_pkey" PRIMARY KEY, btree (id)
    "articles_slug_key" UNIQUE CONSTRAINT, btree (slug)
Foreign-key constraints:
    "articles_author_fkey" FOREIGN KEY (author) REFERENCES authors(id)


########################################################################################################################

                         Table "public.authors"
 Column |  Type   |                      Modifiers
--------+---------+------------------------------------------------------
 name   | text    | not null
 bio    | text    |
 id     | integer | not null default nextval('authors_id_seq'::regclass)
Indexes:
    "authors_pkey" PRIMARY KEY, btree (id)
Referenced by:
    TABLE "articles" CONSTRAINT "articles_author_fkey" FOREIGN KEY (author) REFERENCES authors(id)

########################################################################################################################
                                  Table "public.log"
 Column |           Type           |                    Modifiers
--------+--------------------------+--------------------------------------------------
 path   | text                     |
 ip     | inet                     |
 method | text                     |
 status | text                     |
 time   | timestamp with time zone | default now()
 id     | integer                  | not null default nextval('log_id_seq'::regclass)
Indexes:
    "log_pkey" PRIMARY KEY, btree (id)